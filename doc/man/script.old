
<p>
The main program reads an input script containing the parameters and 
instructions for a calculation. The script is divided into sections, 
each of which contains a different type of information.  Each section
is preceded by a blank line and starts with a line containing a
section title in all capital letters (i.e., 'CHEMISTRY', 'UNIT_CELL', 
etc.) Each block may contain values of a sequence of variables. The 
name of each variable appears on a line by itself, followed by the 
value or (for arrays) values on one more subsequent lines.  The
order in which variables must appear within a section is fixed. The
program stops when it encounters the block title 'FINISH'. 
</p>

<hr><h3>Example Script</h3>
<p> 
This example shows a complete input script for a system containing a 
triblock copolymer containing three chemically distinct blocks in a 
solvent that is chemically identical one of the blocks. The first 
line identifies the version of the file format (version 1.0, for
the format documented here).  The remainder of the script is divided 
into sections, each of which may contain input variables, as 
discussed above. 
</p>

<pre class="file">
 format  1  0

CHEMISTRY
N_monomer           
              3
kuhn                
  0.6000000E+00  0.5000000E+00  0.7000000E+00
chi_flag            
            'B'
chi                 
  1.2000000E-02
  2.0000000E-02 1.50000000E-02
N_chain              
              1
N_block             
              3
block_monomer  
              1              2              3
block_length   
  1.2000000E+02  0.7000000E+02  0.6000000E+02
N_solvent              
              1
solvent_monomer
              2
solvent_size
            1.0
ensemble            
              0
phi_chain      
  0.8000000E+00
phi_solvent      
  0.2000000E+00

UNIT_CELL
dim                 
              1
crystal_system      
     'lamellar'
N_cell_param        
              1
cell_param          
  1.3200000E+01

DISCRETIZATION
ngrid
             32
ds
           1.00

FILE_PREFIXES
input_prefix        
          'in.'
output_prefix       
             ''

BASIS
group_name          
           '-1'

ITERATE
max_itr             
             20
error_max           
  1.0000000E-08
domain              
              T
itr_algo
           'NR'
N_cut
            100

SWEEP
s_max               
   15.00000E+00
d_chi
  0.0000000E+00
  0.0050000E+00  0.0000000E+00
end_increments

FINISH
</pre>


<hr><h3>Script Sections:</h3>
<p>
The following list shows the titles of the blocks required to calculate a 
'sweep' of solutions for a sequence of incrementally different different 
parameters, in the order in which they appear in the above example. 
Subsequent sections describe each of the corresponding blocks of the input 
file in detail.
</p>

<p> 
<b>Primary Sections</b>
<table>
<tr>
  <td><a href="#chemistry">CHEMISTRY</a></td>
  <td>Monomer properties, molecular structures, mixture composition</td>
</tr>
<tr>
  <td><a href="#unit_cell">UNIT_CELL</a></td>
  <td>Dimensionality (1,2 or 3), crystal system, and cell parameters</td>
</tr>
<tr>
  <td> <a href="#discretization">DISCRETIZATION</a></td>
  <td>Numbers of grid points and 'time' step ds.</td>
</tr>
<tr>
  <td> <a href="#file_prefixes">FILE_PREFIXES</a></td>
  <td>Prefixes for paths to input and output files</td>
</tr>
<tr>
  <td> <a href="#basis">BASIS</a></td>
  <td>Read space group and construct symmetrized basis functions</td>
</tr>
<tr>
  <td><a href="#iterate">ITERATE</a> </td>
  <td>Solve SCFT for one set of parameters</td>
</tr>
<tr>
  <td><a href="#sweep">SWEEP</a></td>
  <td>Solve SCFT for a sweep of consecutive parameters</td>
</tr>
<tr>
  <td> <a href="#finish"> FINISH </a> </td>
  <td>Stop program</td>
</tr>
</table>
</p>

<p>
The following other sections are also allowed, prior to the FINISH line:
<table>
<tr>
  <td><a href="#visualization">VISUALIZATION</a></td>
  <td>Convert field from basis function coefficients to grid</td>
</tr>
<tr>
  <td><a href="#rescale_omega">RESCALE</a></td>
  <td>Change scale of omega fields, redefine monomer reference volume</td>
</tr>
<tr>
  <td><a href="#perturb">PERTURB</a></td>
  <td>Calculate linear response matrix at one or more k vectors</td>
</tr>
</table>
</p>
<p>
Details about the contents and purpose of each section are given below.
</p>
<hr>
<h3 id="chemistry">CHEMISTRY</h3>

<p>
The variables in the CHEMISTRY section contains information 
about the chemical structure of the liquid.  The variables 
contained into this section may be divided into variables 
that contain information about: the monomer types, the 
interaction parameters, the polymer molecules (chains), the 
solvent molecules, and the composition of the mixture. The
following table lists the variables in the order in which
(if present) the appear.  A few comments about how to read 
the table:
</p>
<ul>
<li>
Variables that are arrays are indicated by the inclusion of array
indices in the name given in the Variable column.  For example, the 
entry kuhn(im) is a one-dimensional array of statistical segment
lengths for different monomer types. The symbol 'im' indicates
an index for monomer type. The meaning and range of each type of 
index is summarized in a supplementary table below the main table. 
</li>

<li> 
Arrays may appear in different formats, which are specified by 
the codes in the Format column. Generally, arrays that contain 
a polymer or solvent molecular species index are input with the 
required information about each molecule on a separate line, 
while values associated with different monomer types or with
different blocks within a molecule are listed sequentially on
a single line.  The various format codes are summarized in a 
supplementary table below the main table.
</li>

<li> 
Some variables may be present or absent dependeing on the value
of a previous variable. For example, if the variable N_solvent is 
assigned a value 0, indicating that the system contains no small 
molecule solvent species, then no information about the properties 
of the non-existent solvents is required or allowed.  These 
conditions, if any, are given in the 'Absent if' column.
</li> 
</ul>
</p>
</p>
<table class="parameters">
<title>Chemistry Parameters</title>
<tr>
<th align="left" width ="150">Variable </th>
<th align="left" width ="70">Type     </th>
<th align="left" width ="350">Description</th>
<th align="left" width ="60">Format</th>
<th align="left">Absent if:</th>
</tr>
<tr>
  <td>N_monomer</td>
  <td>integer</td>
  <td>Number of monomer types</td>
  <td></td>
</tr>
<tr>
  <td>kuhn(im)</td>
  <td>real </td>
  <td>statistical segment length of monomer im</td>
  <td>R</td>
</tr>
<tr>
  <td>chi_flag</td>
  <td>char(1)</td>
  <td>'B' for 'bare' chi values <br/> 
      'T' for chi=chi_A/T + chi_B</td>
  <td></td>
  <td></td>
</tr>
<tr>
  <td>chi(im,in)</td>
  <td>real </td>
  <td>Flory-Huggins interaction parameter ('bare')</td>
  <td>LT</td>
  <td>chi_flag='T'</td>
</tr>
<tr>
  <td>chi_A(im,in)</td>
  <td>real </td>
  <td>Enthalpic coefficient for chi(T)</td>
  <td>LT</td>
  <td>chi_flag='B'</td>
</tr>
<tr>
  <td>chi_B(im,in)</td>
  <td>real </td>
  <td>Entropic contribution to chi(T)</td>
  <td>LT</td>
  <td>chi_flag='B'</td>
</tr>
<tr>
  <td>Temperature</td>
  <td>real</td>
  <td>Absolute temperature</td>
  <td></td>
  <td>chi_flag='B'</td>
</tr>
<tr>
  <td>N_chain</td>
  <td>integer</td>
  <td>Number of chain species</td>
</tr>
<tr>
  <td>N_block(ic)</td>
  <td>integer </td>
  <td>Number of blocks in species ic</td>
  <td>C</td>
  <td>N_chain=0</td>
</tr>
<tr>
  <td>block_monomer(ib,ic)</td>
  <td>integer </td>
  <td>Monomer type for block ib of species ic</td>
  <td>MR</td>
  <td>N_chain=0</td>
</tr>
<tr>
  <td>block_length(ib,ic)</td>
  <td>real </td>
  <td>Number of monomers in block ib of species ic</td>
  <td>MR</td>
  <td>N_chain=0</td>
</tr>
<tr>
  <td>N_solvent</td>
  <td>integer</td>
  <td>Number of solvent species</td>
  <td></td>
  <td>N_chain=0</td>
</tr>
<tr>
  <td>solvent_monomer(is)</td>
  <td>integer </td>
  <td>Monomer type for solvent is</td>
  <td>C</td>
  <td>N_solvent=0</td>
</tr>
<tr>
  <td>solvent_size(is)</td>
  <td>real</td>
  <td>Volume of solvent is</td>
  <td>C</td>
  <td>N_solvent=0</td>
</tr>
<tr>
  <td>ensemble</td>
  <td>integer</td>
  <td></td>
  <td></td>
</tr>
<tr>
  <td>phi_chain(ic)</td>
  <td>real </td>
  <td>Volume fraction of chain species ic</td>
  <td>C</td>
  <td>ensemble=1 or <bf/>
      N_chain=0</td>
</tr>
<tr>
  <td>phi_solvent(is)</td>
  <td>real </td>
  <td>Volume fraction of solvent species is</td>
  <td>C</td>
  <td>ensemble=1 or<br/> 
      N_solvent=0</td>
</tr>
<tr>
  <td>mu_chain(ic)</td>
  <td>real </td>
  <td>Chemical potential of chain species is</td>
  <td>C</td>
  <td>ensemble=0 or<br/>
      N_chain=0</td>
</tr>
<tr>
  <td>mu_solvent(ic)</td>
  <td>real </td>
  <td>Chemical potential of solvent species ic</td>
  <td>C</td>
  <td>ensemble=0 or<br/>
      N_solvent=0</td>
</tr>
<table>
</p>

<p>
<!--<b>Meaning of Array Indices:</b>-->
<table class="subtable">
<tr> <th> Indices </th> <th> Meaning </th> <th> Range </th> </tr>
<tr>
<td>im, in</td><td>monomer types</td><td>1,...N_monomer</td>
</tr>
<tr>
<td>ic</td><td>chain/polymer species</td><td>1,...N_chain</td>
</tr>
<tr>
<td>ib</td><td>blocks within a chain</td><td>1,...N_block(ic)</td>
</tr>
<tr>
<td>is</td><td>solvent species</td><td>1,...N_solvent</td>
</tr>
</table>
</p>

<p>
<table class="subtable">
<tr> <th> Format </th> <th> Meaning </th> 
<tr> <td> R    </td> <td> 1D array, column format (all values in one line)</td> 
<tr> <td> C    </td> <td> 1D array, column format (one value per line)</td> 
<tr> <td> MR   </td> <td> 2D array, multiple rows of different length</td> 
<tr> <td> LT   </td> <td> 2D array, lower triangular</td> 
</table>
In the row (R) format for 1D arrays, the values all appear on a single
line separated by any amount of whitespace.  The multiple row (MR) format 
is used for the arrays block_monomer(ib,ic) and block_length(ib,ic). In 
each line of data contains the values for all of the blocks of one chain
molecule, with N_block(ic) values in the line for molecule number ic.
The lower triangular (LT) format for square 2D arrays is used for the
array chi(im,in) if chi_flag = 'T', or chi_A(im,in) and chi_A(im,in) if
chi_flag = 'B'. These symmetric arrays with zero diagonal elements are
input in the format
<pre>
   chi(2,1)
   chi(3,1) chi(3,2)
   .....
</pre>
in which line i contains elements chi(i+1,j) for j &le; i. For a 
system with only two monomer types, only a single value on a single
line is required. 
</p>

<p>
<b>Units and Conventions</b>
<ul>
<li> 
Values of the parameters block_length, solvent_size, kuhn, and
chi all depend on the choice of a value for a reference volume
used to define an effective repeat unit.  Each element of the 
variable block_length represents the number of "monomers" in a 
block of a block copolymer, defined to be the ratio of the block 
volume to the chosen reference volume.  Similarly, the variable 
solvent_size is given by ratio of the solvent volume to the 
reference volume. The values of the chi parameters are proportional
to the reference volume, while kuhn lengths are proportional to
the square root of the reference volume. The program does not
require a value for the reference volume as an input - the
choice only effects the values required for other quantities.
</li> 
<li>
Any units of length can be used for the kuhn lengths and the
length of the Bravais lattice vectors, as long as the same units 
are used for both quantities. 
</li>
</ul>
</p>

<!--
<p>
<b>Discussion of Example:</b>
</p>
<p>
First, let us discuss the 'CHEMISTRY' block of the above example.
This block into sets of variables that contain information about 
monomer properties, polymer properties, solvent properties, and 
mixture composition.
</p>
<p>
The first set of variables (N_monomer, names, and kuhn) contain 
information about the monomers: N_monomer=3 is the total number 
of monomer types. We associate labels name(1)='A', name(2)='B', 
and name(3)='C' with these monomer types.  The monomers have 
statistical segment lengths of kuhn(1)=0.6 nm, kuhn(2)=0.5 nm, 
and kuhn(3)=0.7 nm.  
</p>
<p>
The next set of variables specifies the chi parameters. These can
be specified either by giving "bare" values for each interaction
parameter, in which case chi_flag = 'B', as in this example, or
as values of the form chi(i,j) = chiA(i,j)/T + chiB(i,j), in which
case we would set chi_flag = 'T'. Because the matrix chi(i,j) is 
symmetric with zeros on the diagonal, chi parameters are input as 
a lower triangular matrix of the form
<pre>
  chi(2,1)
  chi(3,1)  chi(3,2) 
  ....
</pre>
Only a single value on a single line would be required for 
N_monomer=2.  For systems with chi_flag = 'T', the matrices chi_A 
and chi_B would be input in the same form. For this system, 
chi(1,2) = 0.15, chi(2,3)=0.20, chi(1,3)=0.10. 
</p>
<p>
The next set of variables describes the structure of the polymers.
The system contains two types of polymer (N_chain=2). Properties
of individual molecules are then given with one molecular per line. 
The two molecule types are a triblock, with with N_block(1)=3, and 
a homopolymer with N_block(2)=1.  The array block_monomer 
specifies the chemical identity of each block in each molecule,
with one molecule per line in the input format.  In the example, 
the copolymer is an ACB copolymer and the homopolymer contains C 
monomers. Array block_length specifies the number of monomers in
each block, in the same format.
</p>
-->

<hr><h3 id="unit_cell">UNIT_CELL</h3>
The variables in the UNIT_CELL section contain the information
necessary to define the unit cell type, size, and shape.

<table class="parameters">
<tr>
<th>Variable </th>
<th>Type     </th>
<th>Description</th>
</tr>
<tr>
  <td>dim</td>
  <td>integer</td>
  <td>dimensionality =1, 2, or 3</td>
</tr>
<tr>
  <td>crystal_system</td>
  <td>character(60)</td>
  <td>unit cell type (cubic, tetragonal, orthorhombic, triclinic, etc.)</td>
</tr>
<tr>
  <td>N_cell_param</td>
  <td>integer</td>
  <td># parameters required to describe unit cell</td>
</tr>
<tr>
  <td>cell_param(i)</td>
  <td>real</td>
  <td>N_cell_param unit cell parameters</td>
</tr>
</table>
The array cell_param contains N_cell_param elements, which are input in
row format, with all elements in a single line.

<hr><h3 id="discretization">DISCRETIZATION</h3>
The discretization section defines the grid used to spatially discretize
the modified diffusion equaiton and the size ds of the "step" ds in the 
time-like contour length variable used to integral this equation.

<table class="parameters">
<title>DISCRETIZATION Parameters</title>
<tr>
<th>Variable</th><th>Type</th> <th>Description</th><th>Form</th>
</tr>
<tr>
  <td>ngrid(id)</td>
  <td>integer</td>
  <td># grid points in direction id=1,..,dim</td>
  <td>R</td>
</tr>
<tr>
  <td>ds</td>
  <td>real</td>
  <td>contour length step size</td>
</tr>
</table>
The integer array ngrid(id) is input in row format, with dim (i.e., 1,2 or
3) values on a line.

<hr><h3 id="file_prefixes">FILE_PREFIXES</h3>
The FILE_PREFIXES section inputs the prefixes that are used to construct
the names of the input and output files. The input prefix is concatenated
with 'omega' to construct the name of the input file. The output prefix
is concatenated with the suffixes 'out', 'rho', and 'omega' to create 
the name of the output summary, output monomer concentration field, and 
output omega field files. This, to specify file name 'in.omega', 'out', 
'rho', and 'omega' in the current directory, you would set in_prefix to
'in.', and the output prefix to the blank string ''. To specify an input 
file from another directory, you would set in_prefix to the path to that 
directory, followed by a trailing '/' directory separator.  Both string 
variables are required, and must appear in the order listed below.
<table class="parameters">
<tr>
<th>Variable</th><th>Type</th> <th>Description</th>
</tr>
<tr>
  <td>in_prefix</td>
  <td>character(60)</td>
  <td>prefix to *omega input file</td>
</tr>
<tr>
  <td>out_prefix</td>
  <td>character(60)</td>
  <td>prefix to *rho, *omega, *out output files</td>
</tr>
</table>

<hr><h3 id="basis">BASIS</h3>
<p>
The BASIS block instructs the code to construct symmetrized
basis functions that are invariant under the operations of
a specified space group.  It contains only one variable, 
named "group", which is a string containing either the name
of one of the standard space groups (which are hard coded 
into the program) or the path to a file that contains the
elements of the group. After reading this string from file, 
basis functions are constructed by the make_basis routine 
of module basis_mod.
</p>
<p>
<table class="parameters">
<tr>
<th>Variable</th><th>Type</th> <th>Description</th>
</tr>
<tr>
  <td>group</td>
  <td>character(60)</td>
  <td>name of group, or file that contains group</td>
</tr>
</table>
</p>

<p>
The file format for a group file is determined by the 
input_group routine in module group_mod. Some simple 2D
examples of the format are provided in src/tests/group.
</p>

<hr><h3 id="iterate">ITERATE</h3>
<p>
The ITERATE block reads in variables required by our iteration
algorithm, and attempts to iteratively solve the SCFT equations
for one set of input parameters.
</p>
<p>
<table class="parameters">
<tr>
<th>Variable</th><th>Type</th><th>Description</th>
</tr>
<tr>
  <td>max_itr</td>
  <td>integer</td>
  <td>maximum allowed number of iterations</td>
</tr>
<tr>
  <td>max_error</td>
  <td>real</td>
  <td>Tolerance - maximum error after convergence</td>
</tr>
<tr>
  <td>domain</td>
  <td>logical</td>
  <td>Variable unit cell if true, fixed unit cell if false</td>
</tr>
<tr>
  <td>itr_algo</td>
  <td>character(10)</td>
  <td>Character code for iteration algorithm</td>
</tr>
<tr>
  <td>N_cut</td>
  <td>integer</td>
  <td>Dimension of cutoff Jacobian</td>
</tr>
</table>
</p>
For now, the value of the 'itr_algo' variable must be 'NR', for
Newton-Raphson. The variable is included in order to allow us to 
add other iteration algorithms in the future.

<hr><h3 id="sweep">SWEEP</h3>
<p>
The presence of a SWEEP section instructs the program to solve
the SCFT for a sequence of nearby values of parameters along a
path through parameter space (a 'sweep'). We define a sweep
contour variable s that varies from 0 up to a maximum value 
s_max, in increments of 1. For each integer step in the sweep
parameter, each of the relevant parameters in CHEMISTRY section
(i.e., any parameter for which a floating point value or values
are specified in the input script) may be incremented by a 
user specified amount. For simulations with a fixed unit cell 
(domain=1), the elements of the unit_cell_param array may also 
be incremented. The desired increment for any variable &lt;name&gt; 
is specified by the value or (for an array) values of a corresponding 
increment variable named d_&lt;name&gt. Any number of increments 
may be specified. Variables that are not incremented need not 
be assigned zero increment values (i.e., the increments are 
zero by default). When an array variable is incremented, however,
increment values must be specified for all of the elements of 
the array.  The reading of increment variables ends when the 
program encounters the line 'end_increments'.
</p>

<p>
<table class="parameters">
<tr>
<th>Variable</th><th>Type</th><th>Description</th>
</tr>
<tr>
  <td>s_max</td>
  <td>real</td>
  <td>maximum value of sweep contour variable</td>
</tr>
<tr>
  <td>s_&lt;name&gt;</td>
  <td>type of &lt;name&gt;</td>
  <td>increment in variable &lt;name&gt;</td>
</tr>
<tr>
  <td>end_increment</td>
  <td> none        </td>
  <td>indicates end of the list of increments</td>
</tr>
</table>
</p>

<hr><h3 id="perturb">PERTURB</h3>
<p>
The presence of a PERTURB section instructs the program to 
calculate the linear response matrix for a converged ordered
structure at one or more k-vectors in the first Brillouin
zone. If the linear response is calculated for more than one
k-vector, they must lie along a line in k-space, separated by 
a user defined vector increment. 
</p>
<p>
<table class="parameters">
<tr>
<th>Variable</th><th>Type</th><th>Description</th>
</tr>
<tr>
  <td>pertbasis</td>
  <td>char</td>
  <td>'PW' => plane wave basis, 'SYM' => symmetrized basis functions</td>
</tr>
<tr>
  <td>k_group</td>
  <td>character</td>
  <td>Group used to construct symmetrized basis functions</td>
</tr>
<tr>
  <td>kdim</td>
  <td>int</td>
  <td># dimensions in k-vector (kdim &ge; dim) </td>
</tr>
<tr>
  <td>kvec0(i)</td>
  <td>real</td>
  <td>initial k-vector, i=1,...,kdim</td>
</tr>
<tr>
  <td>dkvec(i)</td>
  <td>real    </td>
  <td>increment in k-vector</td>
</tr>
<tr>
  <td>nkstep</td>
  <td>integer</td>
  <td># of k-vectors</td>
</tr>
</table>
</p>

<hr><h3 id="finish">FINISH</h3>
<p>
The FINISH string causes the program to terminate.
</p>
